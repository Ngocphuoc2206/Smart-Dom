"use client";

import Link from "next/link";
import { useEffect, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useRouter } from "next/navigation";
import { getRoom } from "../hooks/useRoom";

// Mock data
const mockRooms = [
  {
    id: 1,
    number: "101",
    status: "occupied",
    tenant: "Nguy·ªÖn VƒÉn A",
    price: 3000000,
    area: 25,
  },
  {
    id: 2,
    number: "102",
    status: "available",
    tenant: null,
    price: 3200000,
    area: 28,
  },
  {
    id: 3,
    number: "103",
    status: "maintenance",
    tenant: null,
    price: 3000000,
    area: 25,
  },
  {
    id: 4,
    number: "201",
    status: "occupied",
    tenant: "Tr·∫ßn Th·ªã B",
    price: 3500000,
    area: 30,
  },
  {
    id: 5,
    number: "202",
    status: "available",
    tenant: null,
    price: 3500000,
    area: 30,
  },
];

const mockBills = [
  {
    id: 1,
    room: "101",
    tenant: "Nguy·ªÖn VƒÉn A",
    amount: 3500000,
    type: "monthly",
    status: "paid",
    dueDate: "2024-01-25",
  },
  {
    id: 2,
    room: "201",
    tenant: "Tr·∫ßn Th·ªã B",
    amount: 4000000,
    type: "monthly",
    status: "pending",
    dueDate: "2024-01-25",
  },
  {
    id: 3,
    room: "102",
    tenant: "L√™ VƒÉn C",
    amount: 500000,
    type: "electric",
    status: "overdue",
    dueDate: "2024-01-20",
  },
];

const mockReports = [
  {
    id: 1,
    room: "101",
    issue: "M√°y l·∫°nh kh√¥ng ho·∫°t ƒë·ªông",
    status: "pending",
    date: "2024-01-15",
    tenant: "Nguy·ªÖn VƒÉn A",
  },
  {
    id: 2,
    room: "201",
    issue: "V√≤i n∆∞·ªõc b·ªã r√≤ r·ªâ",
    status: "in-progress",
    date: "2024-01-14",
    tenant: "Tr·∫ßn Th·ªã B",
  },
  {
    id: 3,
    room: "103",
    issue: "ƒê√®n ph√≤ng b·ªã h·ªèng",
    status: "completed",
    date: "2024-01-12",
    tenant: "L√™ VƒÉn C",
  },
];

const mockConversations = [
  {
    id: 1,
    tenant: {
      name: "Nguy·ªÖn VƒÉn A",
      room: "101",
      avatar: "üë®",
      phone: "0123456789",
    },
    lastMessage:
      "Ch√†o ch·ªß tr·ªç, em mu·ªën h·ªèi v·ªÅ vi·ªác thanh to√°n ti·ªÅn ph√≤ng th√°ng n√†y ·∫°",
    lastMessageTime: "10:30",
    unreadCount: 2,
    isOnline: true,
    messages: [
      {
        id: 1,
        sender: "tenant",
        content: "Ch√†o ch·ªß tr·ªç ·∫°!",
        timestamp: "09:15",
        date: "2024-03-15",
      },
      {
        id: 2,
        sender: "owner",
        content: "Ch√†o b·∫°n! C√≥ g√¨ c·∫ßn h·ªó tr·ª£ kh√¥ng?",
        timestamp: "09:20",
        date: "2024-03-15",
      },
      {
        id: 3,
        sender: "tenant",
        content: "Em mu·ªën h·ªèi v·ªÅ vi·ªác thanh to√°n ti·ªÅn ph√≤ng th√°ng n√†y ·∫°",
        timestamp: "10:25",
        date: "2024-03-15",
      },
      {
        id: 4,
        sender: "tenant",
        content: "Em c√≥ th·ªÉ chuy·ªÉn kho·∫£n ƒë∆∞·ª£c kh√¥ng ·∫°?",
        timestamp: "10:30",
        date: "2024-03-15",
      },
    ],
  },
  {
    id: 2,
    tenant: {
      name: "Tr·∫ßn Th·ªã B",
      room: "201",
      avatar: "üë©",
      phone: "0987654321",
    },
    lastMessage: "C·∫£m ∆°n ch·ªß tr·ªç ƒë√£ s·ª≠a v√≤i n∆∞·ªõc nhanh ch√≥ng ·∫°!",
    lastMessageTime: "14:45",
    unreadCount: 0,
    isOnline: false,
    messages: [
      {
        id: 1,
        sender: "tenant",
        content: "Ch·ªß tr·ªç ∆°i, v√≤i n∆∞·ªõc trong ph√≤ng em b·ªã r√≤ r·ªâ ·∫°",
        timestamp: "08:30",
        date: "2024-03-14",
      },
      {
        id: 2,
        sender: "owner",
        content: "M√¨nh s·∫Ω g·ªçi th·ª£ l√™n s·ª≠a ngay h√¥m nay nh√©!",
        timestamp: "08:45",
        date: "2024-03-14",
      },
      {
        id: 3,
        sender: "owner",
        content: "Th·ª£ s·∫Ω l√™n v√†o l√∫c 2h chi·ªÅu, b·∫°n c√≥ ·ªü nh√† kh√¥ng?",
        timestamp: "10:00",
        date: "2024-03-14",
      },
      {
        id: 4,
        sender: "tenant",
        content: "D·∫° c√≥ ·∫°, em ·ªü nh√† c·∫£ ng√†y",
        timestamp: "10:05",
        date: "2024-03-14",
      },
      {
        id: 5,
        sender: "tenant",
        content: "C·∫£m ∆°n ch·ªß tr·ªç ƒë√£ s·ª≠a v√≤i n∆∞·ªõc nhanh ch√≥ng ·∫°!",
        timestamp: "14:45",
        date: "2024-03-14",
      },
    ],
  },
  {
    id: 3,
    tenant: {
      name: "L√™ VƒÉn C",
      room: "102",
      avatar: "üë®‚Äçüéì",
      phone: "0369852147",
    },
    lastMessage: "Ch·ªß tr·ªç cho em h·ªèi v·ªÅ quy ƒë·ªãnh gi·ªù gi·∫•c ·∫°",
    lastMessageTime: "H√¥m qua",
    unreadCount: 1,
    isOnline: false,
    messages: [
      {
        id: 1,
        sender: "tenant",
        content: "Ch·ªß tr·ªç cho em h·ªèi v·ªÅ quy ƒë·ªãnh gi·ªù gi·∫•c ·∫°",
        timestamp: "20:30",
        date: "2024-03-14",
      },
    ],
  },
];

export default function OwnerDashboard() {
  const [activeTab, setActiveTab] = useState("overview");
  const { logout } = useAuth();
  const { user } = useAuth();
  const router = useRouter();
  const [rooms, setRooms] = useState<any[]>([]);

  const handleLogout = () => {
    logout();
    router.push("/");
  };

  useEffect(() => {
    getRoom().then(setRooms);
  }, []);

  // Modal states
  const [showRoomModal, setShowRoomModal] = useState(false);
  const [showTenantModal, setShowTenantModal] = useState(false);
  const [showBillModal, setShowBillModal] = useState(false);
  const [showReportDetailModal, setShowReportDetailModal] = useState(false);
  const [showReviewResponseModal, setShowReviewResponseModal] = useState(false);

  // Form states
  const [editingRoom, setEditingRoom] = useState<any>(null);
  const [editingTenant, setEditingTenant] = useState<any>(null);
  const [editingBill, setEditingBill] = useState<any>(null);
  const [selectedReport, setSelectedReport] = useState<any>(null);
  const [selectedReview, setSelectedReview] = useState<any>(null);
  const [responseText, setResponseText] = useState("");
  const [selectedConversation, setSelectedConversation] = useState<any>(null);
  const [newMessage, setNewMessage] = useState("");

  // Form data
  const [roomForm, setRoomForm] = useState({
    number: "",
    price: "",
    area: "",
    floor: "",
    status: "available",
    description: "",
    amenities: [] as string[],
  });

  const [tenantForm, setTenantForm] = useState({
    name: "",
    email: "",
    phone: "",
    idCard: "",
    room: "",
    startDate: "",
    deposit: "",
    emergencyContact: "",
    emergencyPhone: "",
  });

  const [billForm, setBillForm] = useState({
    room: "",
    tenant: "",
    type: "monthly",
    amount: "",
    dueDate: "",
    description: "",
    electricUsage: "",
    waterUsage: "",
  });

  const getStatusColor = (status: string) => {
    switch (status) {
      case "occupied":
        return "bg-green-100 text-green-800";
      case "available":
        return "bg-blue-100 text-blue-800";
      case "maintenance":
        return "bg-yellow-100 text-yellow-800";
      case "paid":
        return "bg-green-100 text-green-800";
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "overdue":
        return "bg-red-100 text-red-800";
      case "in-progress":
        return "bg-blue-100 text-blue-800";
      case "completed":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "occupied":
        return "ƒê√£ thu√™";
      case "available":
        return "Tr·ªëng";
      case "maintenance":
        return "B·∫£o tr√¨";
      case "paid":
        return "ƒê√£ thanh to√°n";
      case "pending":
        return "Ch·ªù thanh to√°n";
      case "overdue":
        return "Qu√° h·∫°n";
      case "in-progress":
        return "ƒêang x·ª≠ l√Ω";
      case "completed":
        return "Ho√†n th√†nh";
      default:
        return status;
    }
  };

  // Modal handlers
  const openRoomModal = (room?: any) => {
    if (room) {
      setEditingRoom(room);
      setRoomForm({
        number: room.number,
        price: room.price.toString(),
        area: room.area.toString(),
        floor: room.floor?.toString() || "",
        status: room.status,
        description: room.description || "",
        amenities: room.amenities || [],
      });
    } else {
      setEditingRoom(null);
      setRoomForm({
        number: "",
        price: "",
        area: "",
        floor: "",
        status: "available",
        description: "",
        amenities: [],
      });
    }
    setShowRoomModal(true);
  };

  const openTenantModal = (tenant?: any) => {
    if (tenant) {
      setEditingTenant(tenant);
      setTenantForm({
        name: tenant.name,
        email: tenant.email || "",
        phone: tenant.phone,
        idCard: tenant.idCard || "",
        room: tenant.room,
        startDate: tenant.startDate,
        deposit: tenant.deposit?.toString() || "",
        emergencyContact: tenant.emergencyContact || "",
        emergencyPhone: tenant.emergencyPhone || "",
      });
    } else {
      setEditingTenant(null);
      setTenantForm({
        name: "",
        email: "",
        phone: "",
        idCard: "",
        room: "",
        startDate: "",
        deposit: "",
        emergencyContact: "",
        emergencyPhone: "",
      });
    }
    setShowTenantModal(true);
  };

  const openBillModal = (bill?: any) => {
    if (bill) {
      setEditingBill(bill);
      setBillForm({
        room: bill.room,
        tenant: bill.tenant,
        type: bill.type,
        amount: bill.amount.toString(),
        dueDate: bill.dueDate,
        description: bill.description || "",
        electricUsage: bill.electricUsage?.toString() || "",
        waterUsage: bill.waterUsage?.toString() || "",
      });
    } else {
      setEditingBill(null);
      setBillForm({
        room: "",
        tenant: "",
        type: "monthly",
        amount: "",
        dueDate: "",
        description: "",
        electricUsage: "",
        waterUsage: "",
      });
    }
    setShowBillModal(true);
  };

  const openReportDetail = (report: any) => {
    setSelectedReport(report);
    setShowReportDetailModal(true);
  };

  // Form submit handlers
  const handleRoomSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log(editingRoom ? "Updating room:" : "Creating room:", roomForm);
    const response = await fetch(`https://localhost:7257/api/Room/create`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        number: parseInt(roomForm.number),
        price: parseFloat(roomForm.price),
        area: parseFloat(roomForm.area),
        floor: roomForm.floor ? parseInt(roomForm.floor) : null,
        status: roomForm.status,
        description: roomForm.description,
        amenities: roomForm.amenities,
      }),
    });
    if (!response.ok) {
      alert(
        editingRoom
          ? "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ph√≤ng!"
          : "C√≥ l·ªói x·∫£y ra khi th√™m ph√≤ng m·ªõi!"
      );
      return;
    }

    setShowRoomModal(false);
    alert(
      editingRoom ? "C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng!" : "Th√™m ph√≤ng m·ªõi th√†nh c√¥ng!"
    );
  };

  const handleTenantSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log(
      editingTenant ? "Updating tenant:" : "Creating tenant:",
      tenantForm
    );
    setShowTenantModal(false);
    alert(
      editingTenant
        ? "C·∫≠p nh·∫≠t kh√°ch thu√™ th√†nh c√¥ng!"
        : "Th√™m kh√°ch thu√™ m·ªõi th√†nh c√¥ng!"
    );
  };

  const handleBillSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log(editingBill ? "Updating bill:" : "Creating bill:", billForm);
    setShowBillModal(false);
    alert(
      editingBill
        ? "C·∫≠p nh·∫≠t h√≥a ƒë∆°n th√†nh c√¥ng!"
        : "T·∫°o h√≥a ƒë∆°n m·ªõi th√†nh c√¥ng!"
    );
  };

  const handleDeleteRoom = (roomId: string) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph√≤ng n√†y?")) {
      console.log("Deleting room:", roomId);
      alert("X√≥a ph√≤ng th√†nh c√¥ng!");
    }
  };

  const handleDeleteTenant = (tenantId: string) => {
    if (confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch thu√™ n√†y?")) {
      console.log("Deleting tenant:", tenantId);
      alert("X√≥a kh√°ch thu√™ th√†nh c√¥ng!");
    }
  };

  const handleUpdateReportStatus = (reportId: string, newStatus: string) => {
    console.log("Updating report status:", reportId, newStatus);
    alert(
      `C·∫≠p nh·∫≠t tr·∫°ng th√°i b√°o c√°o th√†nh "${getStatusText(
        newStatus
      )}" th√†nh c√¥ng!`
    );
    setShowReportDetailModal(false);
  };

  const openReviewResponseModal = (review: any) => {
    setSelectedReview(review);
    setResponseText(review.response || "");
    setShowReviewResponseModal(true);
  };

  const handleReviewResponse = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Responding to review:", selectedReview.id, responseText);
    alert("Ph·∫£n h·ªìi ƒë√°nh gi√° th√†nh c√¥ng!");
    setShowReviewResponseModal(false);
    setResponseText("");
    setSelectedReview(null);
  };

  // Message handlers
  const selectConversation = (conversation: any) => {
    setSelectedConversation(conversation);
  };

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (newMessage.trim() && selectedConversation) {
      console.log(
        "Sending message:",
        newMessage,
        "to:",
        selectedConversation.tenant.name
      );
      // In real app, this would send the message via API
      alert("Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
      setNewMessage("");
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Sidebar */}
      <aside className="fixed left-0 top-0 h-full w-64 bg-white shadow-lg border-r border-gray-200 z-30">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center">
            <div className="h-10 w-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl mr-3 flex items-center justify-center shadow-lg">
              <span className="text-white font-bold text-lg">üè†</span>
            </div>
            <div>
              <h1 className="text-lg font-bold text-gray-900">SmartDorm</h1>
              <p className="text-sm text-gray-500">Dashboard Ch·ªß tr·ªç</p>
            </div>
          </div>
        </div>

        {/* Navigation Menu */}
        <nav className="p-4">
          <div className="space-y-2">
            {[
              { id: "overview", label: "T·ªïng quan", icon: "üìä" },
              { id: "rooms", label: "Qu·∫£n l√Ω ph√≤ng", icon: "üè†" },
              { id: "tenants", label: "Kh√°ch thu√™", icon: "üë•" },
              { id: "bills", label: "H√≥a ƒë∆°n", icon: "üí≥" },
              { id: "reports", label: "B√°o c√°o s·ª± c·ªë", icon: "üîß" },
              { id: "messages", label: "Tin nh·∫Øn", icon: "üí¨" },
              { id: "reviews", label: "ƒê√°nh gi√°", icon: "‚≠ê" },
              { id: "revenue", label: "Doanh thu", icon: "üìà" },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`w-full flex items-center px-4 py-3 text-left rounded-xl font-medium text-sm transition-all duration-200 group ${
                  activeTab === tab.id
                    ? "bg-gradient-to-r from-blue-500 to-indigo-500 text-white shadow-lg transform scale-105"
                    : "text-gray-600 hover:bg-gray-50 hover:text-gray-900 hover:scale-105"
                }`}
              >
                <span
                  className={`mr-3 text-lg transition-transform duration-200 ${
                    activeTab === tab.id ? "scale-110" : "group-hover:scale-110"
                  }`}
                >
                  {tab.icon}
                </span>
                <span className="font-medium">{tab.label}</span>
                {activeTab === tab.id && (
                  <div className="ml-auto w-2 h-2 bg-white rounded-full"></div>
                )}
              </button>
            ))}
          </div>
        </nav>

        {/* User Info & Logout */}
        <div className="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200">
          <div className="mb-3 px-4 py-2 bg-gray-50 rounded-lg">
            <p className="text-sm font-medium text-gray-900">{user?.name}</p>
            <p className="text-xs text-gray-500">{user?.email}</p>
          </div>
          <button
            onClick={handleLogout}
            className="w-full flex items-center px-4 py-3 text-left rounded-xl font-medium text-sm text-red-600 hover:bg-red-50 hover:text-red-700 transition-all duration-200 group"
          >
            <span className="mr-3 text-lg group-hover:scale-110 transition-transform duration-200">
              üö™
            </span>
            <span>ƒêƒÉng xu·∫•t</span>
          </button>
        </div>
      </aside>
      {/* Main Content */}
      <div className="flex-1 ml-64">
        {/* Top Header */}
        <header className="bg-white shadow-sm border-b sticky top-0 z-20">
          <div className="px-6 py-4">
            <div className="flex justify-between items-center">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">
                  {
                    [
                      { id: "overview", label: "T·ªïng quan" },
                      { id: "rooms", label: "Qu·∫£n l√Ω ph√≤ng" },
                      { id: "tenants", label: "Kh√°ch thu√™" },
                      { id: "bills", label: "H√≥a ƒë∆°n" },
                      { id: "reports", label: "B√°o c√°o s·ª± c·ªë" },
                      { id: "messages", label: "Tin nh·∫Øn" },
                      { id: "reviews", label: "ƒê√°nh gi√° ph√≤ng" },
                      { id: "revenue", label: "Doanh thu" },
                    ].find((tab) => tab.id === activeTab)?.label
                  }
                </h2>
                <p className="text-gray-600">
                  Qu·∫£n l√Ω v√† theo d√µi ho·∫°t ƒë·ªông c·ªßa h·ªá th·ªëng
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-sm text-gray-500">
                  {new Date().toLocaleDateString("vi-VN")}
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Content Area */}
        <main className="p-6">
          {/* Overview Tab */}
          {activeTab === "overview" && (
            <div className="space-y-6">
              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-white p-6 rounded-lg shadow">
                  <div className="flex items-center">
                    <div className="text-3xl mr-4">üè†</div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">
                        T·ªïng ph√≤ng
                      </p>
                      <p className="text-2xl font-bold text-gray-900">5</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow">
                  <div className="flex items-center">
                    <div className="text-3xl mr-4">‚úÖ</div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">
                        ƒê√£ thu√™
                      </p>
                      <p className="text-2xl font-bold text-green-600">2</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow">
                  <div className="flex items-center">
                    <div className="text-3xl mr-4">üîì</div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">
                        Ph√≤ng tr·ªëng
                      </p>
                      <p className="text-2xl font-bold text-blue-600">2</p>
                    </div>
                  </div>
                </div>
                <div className="bg-white p-6 rounded-lg shadow">
                  <div className="flex items-center">
                    <div className="text-3xl mr-4">üí∞</div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">
                        Doanh thu th√°ng
                      </p>
                      <p className="text-2xl font-bold text-green-600">7.5M</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recent Activities */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-white p-6 rounded-lg shadow">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    H√≥a ƒë∆°n c·∫ßn x·ª≠ l√Ω
                  </h3>
                  <div className="space-y-3">
                    {mockBills
                      .filter((bill) => bill.status !== "paid")
                      .map((bill) => (
                        <div
                          key={bill.id}
                          className="flex justify-between items-center p-3 bg-gray-50 rounded"
                        >
                          <div>
                            <p className="font-medium">
                              Ph√≤ng {bill.room} - {bill.tenant}
                            </p>
                            <p className="text-sm text-gray-600">
                              {bill.amount.toLocaleString()}ƒë
                            </p>
                          </div>
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              bill.status
                            )}`}
                          >
                            {getStatusText(bill.status)}
                          </span>
                        </div>
                      ))}
                  </div>
                </div>

                <div className="bg-white p-6 rounded-lg shadow">
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">
                    B√°o c√°o s·ª± c·ªë m·ªõi
                  </h3>
                  <div className="space-y-3">
                    {mockReports
                      .filter((report) => report.status !== "completed")
                      .map((report) => (
                        <div
                          key={report.id}
                          className="flex justify-between items-center p-3 bg-gray-50 rounded"
                        >
                          <div>
                            <p className="font-medium">Ph√≤ng {report.room}</p>
                            <p className="text-sm text-gray-600">
                              {report.issue}
                            </p>
                          </div>
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              report.status
                            )}`}
                          >
                            {getStatusText(report.status)}
                          </span>
                        </div>
                      ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Rooms Tab */}
          {activeTab === "rooms" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  Qu·∫£n l√Ω ph√≤ng tr·ªç
                </h2>
                <button
                  onClick={() => openRoomModal()}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                >
                  <span className="mr-2">+</span>
                  Th√™m ph√≤ng m·ªõi
                </button>
              </div>

              <div className="bg-white shadow rounded-lg overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tr·∫°ng th√°i
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Kh√°ch thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Gi√° thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Di·ªán t√≠ch
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thao t√°c
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {rooms.map((room) => (
                      <tr key={room.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {room.roomNumber}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              room.status
                            )}`}
                          >
                            {getStatusText(room.status)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {room.fullName || "-"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {room.price.toLocaleString()}ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {room.area}m¬≤
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button
                            onClick={() => openRoomModal(room)}
                            className="text-blue-600 hover:text-blue-900 mr-3 px-3 py-1 rounded-lg hover:bg-blue-50 transition-colors"
                          >
                            S·ª≠a
                          </button>
                          <button
                            onClick={() => handleDeleteRoom(room.id.toString())}
                            className="text-red-600 hover:text-red-900 px-3 py-1 rounded-lg hover:bg-red-50 transition-colors"
                          >
                            X√≥a
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Bills Tab */}
          {activeTab === "bills" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  Qu·∫£n l√Ω h√≥a ƒë∆°n
                </h2>
                <button
                  onClick={() => openBillModal()}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                >
                  <span className="mr-2">+</span>
                  T·∫°o h√≥a ƒë∆°n m·ªõi
                </button>
              </div>

              <div className="bg-white shadow rounded-lg overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Kh√°ch thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Lo·∫°i h√≥a ƒë∆°n
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        S·ªë ti·ªÅn
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        H·∫°n thanh to√°n
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tr·∫°ng th√°i
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thao t√°c
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {mockBills.map((bill) => (
                      <tr key={bill.id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {bill.room}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {bill.tenant}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {bill.type === "monthly" ? "Ti·ªÅn ph√≤ng" : "Ti·ªÅn ƒëi·ªán"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {bill.amount.toLocaleString()}ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {bill.dueDate}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              bill.status
                            )}`}
                          >
                            {getStatusText(bill.status)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button
                            onClick={() => openBillModal(bill)}
                            className="text-blue-600 hover:text-blue-900 mr-3"
                          >
                            Xem
                          </button>
                          <button
                            onClick={() => openBillModal(bill)}
                            className="text-green-600 hover:text-green-900 mr-3"
                          >
                            S·ª≠a
                          </button>
                          <button
                            onClick={() => alert("ƒê√£ g·ª≠i nh·∫Øc nh·ªü thanh to√°n!")}
                            className="text-orange-600 hover:text-orange-900"
                          >
                            Nh·∫Øc nh·ªü
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Other tabs would be implemented similarly */}
          {activeTab === "tenants" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  Qu·∫£n l√Ω kh√°ch thu√™
                </h2>
                <button
                  onClick={() => openTenantModal()}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
                >
                  <span className="mr-2">+</span>
                  Th√™m kh√°ch thu√™ m·ªõi
                </button>
              </div>

              <div className="bg-white shadow rounded-lg overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Kh√°ch thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        ƒêi·ªán tho·∫°i
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ng√†y b·∫Øt ƒë·∫ßu
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tr·∫°ng th√°i
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thao t√°c
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {[
                      {
                        id: 1,
                        name: "Nguy·ªÖn VƒÉn A",
                        room: "101",
                        phone: "0123456789",
                        startDate: "01/01/2024",
                        status: "active",
                      },
                      {
                        id: 2,
                        name: "Tr·∫ßn Th·ªã B",
                        room: "102",
                        phone: "0987654321",
                        startDate: "15/01/2024",
                        status: "active",
                      },
                      {
                        id: 3,
                        name: "L√™ VƒÉn C",
                        room: "201",
                        phone: "0369852147",
                        startDate: "01/02/2024",
                        status: "pending",
                      },
                    ].map((tenant) => (
                      <tr key={tenant.id}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="h-10 w-10 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold mr-4">
                              {tenant.name.charAt(0)}
                            </div>
                            <div>
                              <div className="text-sm font-medium text-gray-900">
                                {tenant.name}
                              </div>
                              <div className="text-sm text-gray-500">
                                ID: {tenant.id.toString().padStart(3, "0")}
                              </div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {tenant.room}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {tenant.phone}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {tenant.startDate}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${
                              tenant.status === "active"
                                ? "bg-green-100 text-green-800"
                                : "bg-yellow-100 text-yellow-800"
                            }`}
                          >
                            {tenant.status === "active"
                              ? "ƒêang thu√™"
                              : "Ch·ªù x√°c nh·∫≠n"}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button
                            onClick={() => openTenantModal(tenant)}
                            className="text-blue-600 hover:text-blue-900 mr-3"
                          >
                            Xem
                          </button>
                          <button
                            onClick={() => openTenantModal(tenant)}
                            className="text-green-600 hover:text-green-900 mr-3"
                          >
                            S·ª≠a
                          </button>
                          <button
                            onClick={() =>
                              handleDeleteTenant(tenant.id.toString())
                            }
                            className="text-red-600 hover:text-red-900"
                          >
                            X√≥a
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {activeTab === "reports" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  B√°o c√°o s·ª± c·ªë
                </h2>
                <div className="flex space-x-3">
                  <select className="border border-gray-300 rounded-lg px-3 py-2">
                    <option>T·∫•t c·∫£ tr·∫°ng th√°i</option>
                    <option>Ch·ªù x·ª≠ l√Ω</option>
                    <option>ƒêang x·ª≠ l√Ω</option>
                    <option>Ho√†n th√†nh</option>
                  </select>
                  <select className="border border-gray-300 rounded-lg px-3 py-2">
                    <option>T·∫•t c·∫£ m·ª©c ƒë·ªô</option>
                    <option>Cao</option>
                    <option>Trung b√¨nh</option>
                    <option>Th·∫•p</option>
                  </select>
                </div>
              </div>

              <div className="bg-white shadow rounded-lg overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        S·ª± c·ªë
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Kh√°ch thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        M·ª©c ƒë·ªô
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ng√†y b√°o c√°o
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tr·∫°ng th√°i
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Thao t√°c
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {[
                      {
                        id: 1,
                        issue: "M√°y l·∫°nh kh√¥ng ho·∫°t ƒë·ªông",
                        room: "101",
                        tenant: "Nguy·ªÖn VƒÉn A",
                        priority: "high",
                        date: "2024-02-20",
                        status: "in-progress",
                        description: "M√°y l·∫°nh kh√¥ng th·ªïi l·∫°nh t·ª´ 2 ng√†y nay",
                      },
                      {
                        id: 2,
                        issue: "V√≤i n∆∞·ªõc b·ªã r√≤ r·ªâ",
                        room: "102",
                        tenant: "Tr·∫ßn Th·ªã B",
                        priority: "medium",
                        date: "2024-02-18",
                        status: "completed",
                        description: "V√≤i lavabo trong ph√≤ng t·∫Øm b·ªã r√≤ n∆∞·ªõc",
                      },
                      {
                        id: 3,
                        issue: "B√≥ng ƒë√®n h·ªèng",
                        room: "201",
                        tenant: "L√™ VƒÉn C",
                        priority: "low",
                        date: "2024-02-25",
                        status: "pending",
                        description: "B√≥ng ƒë√®n ph√≤ng ng·ªß kh√¥ng s√°ng",
                      },
                    ].map((report) => (
                      <tr key={report.id}>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {report.issue}
                            </div>
                            <div className="text-sm text-gray-500 max-w-xs truncate">
                              {report.description}
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {report.room}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {report.tenant}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${
                              report.priority === "high"
                                ? "bg-red-100 text-red-800"
                                : report.priority === "medium"
                                ? "bg-yellow-100 text-yellow-800"
                                : "bg-green-100 text-green-800"
                            }`}
                          >
                            {report.priority === "high"
                              ? "Cao"
                              : report.priority === "medium"
                              ? "Trung b√¨nh"
                              : "Th·∫•p"}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {report.date}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              report.status
                            )}`}
                          >
                            {getStatusText(report.status)}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <button
                            onClick={() => openReportDetail(report)}
                            className="text-blue-600 hover:text-blue-900 mr-3"
                          >
                            Xem
                          </button>
                          <button
                            onClick={() => openReportDetail(report)}
                            className="text-green-600 hover:text-green-900 mr-3"
                          >
                            C·∫≠p nh·∫≠t
                          </button>
                          {report.status === "pending" && (
                            <button
                              onClick={() =>
                                handleUpdateReportStatus(
                                  report.id.toString(),
                                  "in-progress"
                                )
                              }
                              className="text-orange-600 hover:text-orange-900"
                            >
                              X·ª≠ l√Ω
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          {/* Messages Tab */}
          {activeTab === "messages" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  Tin nh·∫Øn v·ªõi kh√°ch thu√™
                </h2>
                <div className="flex items-center space-x-3">
                  <div className="text-sm text-gray-500">
                    {mockConversations.reduce(
                      (sum, conv) => sum + conv.unreadCount,
                      0
                    )}{" "}
                    tin nh·∫Øn ch∆∞a ƒë·ªçc
                  </div>
                  <button className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center">
                    <span className="mr-2">+</span>
                    Tin nh·∫Øn m·ªõi
                  </button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[600px]">
                {/* Conversations List */}
                <div className="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
                  <div className="p-4 border-b border-gray-200">
                    <h3 className="font-semibold text-gray-900">
                      Cu·ªôc tr√≤ chuy·ªán
                    </h3>
                  </div>
                  <div className="overflow-y-auto h-full">
                    {mockConversations.map((conversation) => (
                      <div
                        key={conversation.id}
                        onClick={() => selectConversation(conversation)}
                        className={`p-4 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors ${
                          selectedConversation?.id === conversation.id
                            ? "bg-blue-50 border-blue-200"
                            : ""
                        }`}
                      >
                        <div className="flex items-start space-x-3">
                          <div className="relative">
                            <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                              {conversation.tenant.avatar}
                            </div>
                            {conversation.isOnline && (
                              <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
                            )}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <h4 className="font-medium text-gray-900 truncate">
                                {conversation.tenant.name}
                              </h4>
                              <span className="text-xs text-gray-500">
                                {conversation.lastMessageTime}
                              </span>
                            </div>
                            <p className="text-sm text-gray-600 mb-1">
                              Ph√≤ng {conversation.tenant.room}
                            </p>
                            <p className="text-sm text-gray-500 truncate">
                              {conversation.lastMessage}
                            </p>
                            {conversation.unreadCount > 0 && (
                              <div className="mt-2">
                                <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                                  {conversation.unreadCount}
                                </span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Chat Area */}
                <div className="lg:col-span-2 bg-white rounded-2xl shadow-lg border border-gray-100 flex flex-col">
                  {selectedConversation ? (
                    <>
                      {/* Chat Header */}
                      <div className="p-4 border-b border-gray-200 flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="relative">
                            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                              {selectedConversation.tenant.avatar}
                            </div>
                            {selectedConversation.isOnline && (
                              <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 rounded-full border-2 border-white"></div>
                            )}
                          </div>
                          <div>
                            <h3 className="font-semibold text-gray-900">
                              {selectedConversation.tenant.name}
                            </h3>
                            <p className="text-sm text-gray-500">
                              Ph√≤ng {selectedConversation.tenant.room} ‚Ä¢{" "}
                              {selectedConversation.tenant.phone}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100">
                            üìû
                          </button>
                          <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100">
                            ‚ÑπÔ∏è
                          </button>
                        </div>
                      </div>

                      {/* Messages */}
                      <div className="flex-1 p-4 overflow-y-auto space-y-4">
                        {selectedConversation.messages.map((message: any) => (
                          <div
                            key={message.id}
                            className={`flex ${
                              message.sender === "owner"
                                ? "justify-end"
                                : "justify-start"
                            }`}
                          >
                            <div
                              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-2xl ${
                                message.sender === "owner"
                                  ? "bg-blue-600 text-white"
                                  : "bg-gray-100 text-gray-900"
                              }`}
                            >
                              <p className="text-sm">{message.content}</p>
                              <p
                                className={`text-xs mt-1 ${
                                  message.sender === "owner"
                                    ? "text-blue-100"
                                    : "text-gray-500"
                                }`}
                              >
                                {message.timestamp}
                              </p>
                            </div>
                          </div>
                        ))}
                      </div>

                      {/* Message Input */}
                      <div className="p-4 border-t border-gray-200">
                        <form
                          onSubmit={handleSendMessage}
                          className="flex space-x-3"
                        >
                          <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            className="form-input flex-1 border border-gray-300 rounded-lg px-4 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                          />
                          <button
                            type="submit"
                            disabled={!newMessage.trim()}
                            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                          >
                            G·ª≠i
                          </button>
                        </form>
                      </div>
                    </>
                  ) : (
                    <div className="flex-1 flex items-center justify-center">
                      <div className="text-center">
                        <div className="text-6xl mb-4">üí¨</div>
                        <h3 className="text-lg font-medium text-gray-900 mb-2">
                          Ch·ªçn cu·ªôc tr√≤ chuy·ªán
                        </h3>
                        <p className="text-gray-600">
                          Ch·ªçn m·ªôt kh√°ch thu√™ ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫Øn tin
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Reviews Tab */}
          {activeTab === "reviews" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  ƒê√°nh gi√° t·ª´ kh√°ch thu√™
                </h2>
                <div className="flex space-x-3">
                  <select className="border border-gray-300 rounded-lg px-3 py-2">
                    <option>T·∫•t c·∫£ ƒë√°nh gi√°</option>
                    <option>5 sao</option>
                    <option>4 sao</option>
                    <option>3 sao</option>
                    <option>2 sao</option>
                    <option>1 sao</option>
                  </select>
                  <select className="border border-gray-300 rounded-lg px-3 py-2">
                    <option>T·∫•t c·∫£ ph√≤ng</option>
                    <option>Ph√≤ng 101</option>
                    <option>Ph√≤ng 102</option>
                    <option>Ph√≤ng 201</option>
                    <option>Ph√≤ng 202</option>
                  </select>
                </div>
              </div>

              {/* Review Summary */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-gradient-to-r from-yellow-400 to-orange-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-yellow-100 text-sm">
                        ƒê√°nh gi√° trung b√¨nh
                      </p>
                      <p className="text-3xl font-bold">4.2</p>
                      <div className="flex items-center mt-1">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <span
                            key={star}
                            className={`text-lg ${
                              star <= 4 ? "text-yellow-200" : "text-yellow-400"
                            }`}
                          >
                            ‚≠ê
                          </span>
                        ))}
                      </div>
                    </div>
                    <div className="text-4xl">‚≠ê</div>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-green-500 to-emerald-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">T·ªïng ƒë√°nh gi√°</p>
                      <p className="text-3xl font-bold">24</p>
                      <p className="text-green-100 text-sm">+3 tu·∫ßn n√†y</p>
                    </div>
                    <div className="text-4xl">üìù</div>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-blue-500 to-cyan-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">ƒê√°nh gi√° t√≠ch c·ª±c</p>
                      <p className="text-3xl font-bold">87%</p>
                      <p className="text-blue-100 text-sm">4-5 sao</p>
                    </div>
                    <div className="text-4xl">üëç</div>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-purple-500 to-pink-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">
                        Ph√≤ng ƒë∆∞·ª£c y√™u th√≠ch
                      </p>
                      <p className="text-3xl font-bold">101</p>
                      <p className="text-purple-100 text-sm">4.8/5 sao</p>
                    </div>
                    <div className="text-4xl">üèÜ</div>
                  </div>
                </div>
              </div>

              {/* Reviews List */}
              <div className="space-y-4">
                {[
                  {
                    id: 1,
                    tenant: "Nguy·ªÖn VƒÉn A",
                    room: "101",
                    rating: 5,
                    date: "2024-03-01",
                    review:
                      "Ph√≤ng r·∫•t s·∫°ch s·∫Ω, ti·ªán nghi ƒë·∫ßy ƒë·ªß. Ch·ªß tr·ªç nhi·ªát t√¨nh, h·ªó tr·ª£ nhanh ch√≥ng khi c√≥ v·∫•n ƒë·ªÅ. V·ªã tr√≠ thu·∫≠n l·ª£i, g·∫ßn tr∆∞·ªùng h·ªçc v√† ch·ª£. R·∫•t h√†i l√≤ng!",
                    categories: {
                      cleanliness: 5,
                      facilities: 5,
                      location: 4,
                      value: 5,
                      landlord: 5,
                    },
                    anonymous: false,
                    response:
                      "C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu v√¨ ƒë√°nh gi√° t√≠ch c·ª±c! Ch√∫ng t√¥i lu√¥n c·ªë g·∫Øng t·∫°o m√¥i tr∆∞·ªùng s·ªëng t·ªët nh·∫•t cho c√°c b·∫°n sinh vi√™n. Ch√∫c b·∫°n h·ªçc t·∫≠p t·ªët!",
                    responseDate: "2024-03-02",
                  },
                  {
                    id: 2,
                    tenant: "·∫®n danh",
                    room: "102",
                    rating: 4,
                    date: "2024-02-28",
                    review:
                      "Ph√≤ng kh√° t·ªët, gi√° c·∫£ h·ª£p l√Ω. M√°y l·∫°nh ho·∫°t ƒë·ªông t·ªët, internet ·ªïn ƒë·ªãnh. Ch·ªâ c√≥ ƒëi·ªÅu √¢m thanh c√°ch √¢m ch∆∞a t·ªët l·∫Øm, ƒë√¥i khi nghe th·∫•y ti·∫øng ·ªìn t·ª´ ph√≤ng b√™n.",
                    categories: {
                      cleanliness: 4,
                      facilities: 4,
                      location: 4,
                      value: 4,
                      landlord: 4,
                    },
                    anonymous: true,
                  },
                  {
                    id: 3,
                    tenant: "Tr·∫ßn Th·ªã B",
                    room: "201",
                    rating: 4,
                    date: "2024-02-25",
                    review:
                      "Ph√≤ng tho√°ng m√°t, view ƒë·∫πp. Ch·ªß tr·ªç d·ªÖ th∆∞∆°ng, lu√¥n quan t√¢m ƒë·∫øn kh√°ch thu√™. Khu v·ª±c an ninh t·ªët, c√≥ b·∫£o v·ªá 24/7.",
                    categories: {
                      cleanliness: 4,
                      facilities: 4,
                      location: 5,
                      value: 4,
                      landlord: 5,
                    },
                    anonymous: false,
                  },
                ].map((review) => (
                  <div
                    key={review.id}
                    className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6"
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center">
                        <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold mr-4">
                          {review.anonymous ? "?" : review.tenant.charAt(0)}
                        </div>
                        <div>
                          <h4 className="font-semibold text-gray-900">
                            {review.tenant}
                          </h4>
                          <p className="text-sm text-gray-600">
                            Ph√≤ng {review.room} ‚Ä¢ {review.date}
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="flex items-center mb-1">
                          {[1, 2, 3, 4, 5].map((star) => (
                            <span
                              key={star}
                              className={`text-lg ${
                                star <= review.rating
                                  ? "text-yellow-400"
                                  : "text-gray-300"
                              }`}
                            >
                              ‚≠ê
                            </span>
                          ))}
                          <span className="ml-2 font-bold text-gray-900">
                            {review.rating}/5
                          </span>
                        </div>
                        <p className="text-sm text-gray-600">
                          {review.rating >= 4.5
                            ? "Xu·∫•t s·∫Øc"
                            : review.rating >= 4
                            ? "R·∫•t t·ªët"
                            : review.rating >= 3
                            ? "T·ªët"
                            : review.rating >= 2
                            ? "Trung b√¨nh"
                            : "C·∫ßn c·∫£i thi·ªán"}
                        </p>
                      </div>
                    </div>

                    <p className="text-gray-700 mb-4 leading-relaxed">
                      {review.review}
                    </p>

                    <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-4">
                      {Object.entries(review.categories).map(
                        ([category, rating]) => (
                          <div key={category} className="text-center">
                            <p className="text-xs text-gray-600 mb-1">
                              {category === "cleanliness"
                                ? "V·ªá sinh"
                                : category === "facilities"
                                ? "Ti·ªán nghi"
                                : category === "location"
                                ? "V·ªã tr√≠"
                                : category === "value"
                                ? "Gi√° tr·ªã"
                                : "Ch·ªß tr·ªç"}
                            </p>
                            <div className="flex justify-center">
                              {[1, 2, 3, 4, 5].map((star) => (
                                <span
                                  key={star}
                                  className={`text-sm ${
                                    star <= rating
                                      ? "text-yellow-400"
                                      : "text-gray-300"
                                  }`}
                                >
                                  ‚≠ê
                                </span>
                              ))}
                            </div>
                          </div>
                        )
                      )}
                    </div>

                    {/* Owner Response */}
                    {review.response && (
                      <div className="mt-4 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-500">
                        <div className="flex items-start">
                          <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold mr-3 text-sm">
                            CT
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center mb-2">
                              <span className="font-medium text-blue-900">
                                Ph·∫£n h·ªìi t·ª´ ch·ªß tr·ªç
                              </span>
                              <span className="ml-2 text-sm text-blue-600">
                                {review.responseDate}
                              </span>
                            </div>
                            <p className="text-blue-800">{review.response}</p>
                          </div>
                        </div>
                      </div>
                    )}

                    <div className="flex justify-between items-center pt-4 border-t border-gray-200">
                      <div className="flex space-x-3">
                        <button
                          onClick={() => openReviewResponseModal(review)}
                          className="text-blue-600 hover:text-blue-800 text-sm font-medium px-3 py-1 rounded-lg hover:bg-blue-50 transition-colors"
                        >
                          {review.response ? "Ch·ªânh s·ª≠a ph·∫£n h·ªìi" : "Ph·∫£n h·ªìi"}
                        </button>
                        <button className="text-green-600 hover:text-green-800 text-sm font-medium px-3 py-1 rounded-lg hover:bg-green-50 transition-colors">
                          C·∫£m ∆°n
                        </button>
                      </div>
                      <div className="flex items-center text-sm text-gray-500">
                        <span className="mr-2">H·ªØu √≠ch?</span>
                        <button className="text-green-600 hover:text-green-800 mr-1">
                          üëç
                        </button>
                        <span className="text-xs">12</span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === "revenue" && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">
                  B√°o c√°o doanh thu
                </h2>
                <div className="flex space-x-3">
                  <select className="border border-gray-300 rounded-lg px-3 py-2">
                    <option>Th√°ng n√†y</option>
                    <option>Th√°ng tr∆∞·ªõc</option>
                    <option>3 th√°ng g·∫ßn ƒë√¢y</option>
                    <option>6 th√°ng g·∫ßn ƒë√¢y</option>
                    <option>NƒÉm nay</option>
                  </select>
                  <button className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                    Xu·∫•t b√°o c√°o
                  </button>
                </div>
              </div>

              {/* Revenue Summary Cards */}
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="bg-gradient-to-r from-green-500 to-emerald-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-green-100 text-sm">T·ªïng doanh thu</p>
                      <p className="text-2xl font-bold">15.2M</p>
                      <p className="text-green-100 text-sm">
                        +12% so v·ªõi th√°ng tr∆∞·ªõc
                      </p>
                    </div>
                    <div className="text-3xl">üí∞</div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-blue-500 to-cyan-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Ti·ªÅn ph√≤ng</p>
                      <p className="text-2xl font-bold">12.0M</p>
                      <p className="text-blue-100 text-sm">
                        79% t·ªïng doanh thu
                      </p>
                    </div>
                    <div className="text-3xl">üè†</div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-purple-500 to-pink-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Ti·ªÅn ƒëi·ªán n∆∞·ªõc</p>
                      <p className="text-2xl font-bold">2.8M</p>
                      <p className="text-purple-100 text-sm">
                        18% t·ªïng doanh thu
                      </p>
                    </div>
                    <div className="text-3xl">‚ö°</div>
                  </div>
                </div>
                <div className="bg-gradient-to-r from-orange-500 to-red-500 p-6 rounded-2xl text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-orange-100 text-sm">Ph√≠ d·ªãch v·ª•</p>
                      <p className="text-2xl font-bold">400K</p>
                      <p className="text-orange-100 text-sm">
                        3% t·ªïng doanh thu
                      </p>
                    </div>
                    <div className="text-3xl">üîß</div>
                  </div>
                </div>
              </div>

              {/* Revenue Chart Placeholder */}
              <div className="bg-white p-6 rounded-2xl shadow-lg border border-gray-100">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  Bi·ªÉu ƒë·ªì doanh thu theo th√°ng
                </h3>
                <div className="h-64 bg-gradient-to-r from-blue-50 to-green-50 rounded-xl flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-4xl mb-4">üìä</div>
                    <p className="text-gray-600">
                      Bi·ªÉu ƒë·ªì doanh thu s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y
                    </p>
                    <p className="text-sm text-gray-500 mt-2">
                      T√≠ch h·ª£p v·ªõi th∆∞ vi·ªán Chart.js ho·∫∑c Recharts
                    </p>
                  </div>
                </div>
              </div>

              {/* Revenue Details Table */}
              <div className="bg-white shadow rounded-lg overflow-hidden">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Chi ti·∫øt doanh thu theo ph√≤ng
                  </h3>
                </div>
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Kh√°ch thu√™
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Ti·ªÅn ph√≤ng
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        ƒêi·ªán n∆∞·ªõc
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        D·ªãch v·ª•
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        T·ªïng c·ªông
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Tr·∫°ng th√°i
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {[
                      {
                        room: "101",
                        tenant: "Nguy·ªÖn VƒÉn A",
                        rent: 3000000,
                        utilities: 800000,
                        service: 100000,
                        status: "paid",
                      },
                      {
                        room: "102",
                        tenant: "Tr·∫ßn Th·ªã B",
                        rent: 3200000,
                        utilities: 750000,
                        service: 100000,
                        status: "paid",
                      },
                      {
                        room: "201",
                        tenant: "L√™ VƒÉn C",
                        rent: 3500000,
                        utilities: 900000,
                        service: 100000,
                        status: "pending",
                      },
                      {
                        room: "202",
                        tenant: "Ph·∫°m Th·ªã D",
                        rent: 3500000,
                        utilities: 850000,
                        service: 100000,
                        status: "paid",
                      },
                    ].map((item, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {item.room}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.tenant}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.rent.toLocaleString()}ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.utilities.toLocaleString()}ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.service.toLocaleString()}ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {(
                            item.rent +
                            item.utilities +
                            item.service
                          ).toLocaleString()}
                          ƒë
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                              item.status
                            )}`}
                          >
                            {getStatusText(item.status)}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </main>
      </div>
      {/* Room Modal */}
      {showRoomModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">
                {editingRoom ? "Ch·ªânh s·ª≠a ph√≤ng" : "Th√™m ph√≤ng m·ªõi"}
              </h3>
              <p className="text-gray-600 mt-1">
                {editingRoom
                  ? "C·∫≠p nh·∫≠t th√¥ng tin ph√≤ng"
                  : "Nh·∫≠p th√¥ng tin ph√≤ng m·ªõi"}
              </p>
            </div>
            <form onSubmit={handleRoomSubmit} className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ph√≤ng *
                  </label>
                  <input
                    type="text"
                    value={roomForm.number}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, number: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 101, 102..."
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Gi√° thu√™ (VNƒê) *
                  </label>
                  <input
                    type="number"
                    value={roomForm.price}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, price: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 3000000"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Di·ªán t√≠ch (m¬≤) *
                  </label>
                  <input
                    type="number"
                    value={roomForm.area}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, area: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 25"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë t·∫ßng *
                  </label>
                  <input
                    type="number"
                    value={roomForm.floor}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, floor: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 1, 2, 3..."
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Tr·∫°ng th√°i
                  </label>
                  <select
                    value={roomForm.status}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, status: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                  >
                    <option value="available">Tr·ªëng</option>
                    <option value="occupied">ƒê√£ thu√™</option>
                    <option value="maintenance">B·∫£o tr√¨</option>
                  </select>
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    M√¥ t·∫£ ph√≤ng
                  </label>
                  <textarea
                    value={roomForm.description}
                    onChange={(e) =>
                      setRoomForm({ ...roomForm, description: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    rows={3}
                    placeholder="M√¥ t·∫£ v·ªÅ ph√≤ng, v·ªã tr√≠, ƒë·∫∑c ƒëi·ªÉm..."
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ti·ªán nghi
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                    {[
                      "M√°y l·∫°nh",
                      "T·ªß l·∫°nh",
                      "M√°y n∆∞·ªõc n√≥ng",
                      "WiFi",
                      "Gi∆∞·ªùng",
                      "T·ªß qu·∫ßn √°o",
                      "B√†n h·ªçc",
                      "Ban c√¥ng",
                    ].map((amenity) => (
                      <label key={amenity} className="flex items-center">
                        <input
                          type="checkbox"
                          checked={roomForm.amenities.includes(amenity)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setRoomForm({
                                ...roomForm,
                                amenities: [...roomForm.amenities, amenity],
                              });
                            } else {
                              setRoomForm({
                                ...roomForm,
                                amenities: roomForm.amenities.filter(
                                  (a) => a !== amenity
                                ),
                              });
                            }
                          }}
                          className="mr-2"
                        />
                        <span className="text-sm">{amenity}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowRoomModal(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {editingRoom ? "C·∫≠p nh·∫≠t" : "Th√™m ph√≤ng"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* Tenant Modal */}
      {showTenantModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">
                {editingTenant ? "Ch·ªânh s·ª≠a kh√°ch thu√™" : "Th√™m kh√°ch thu√™ m·ªõi"}
              </h3>
              <p className="text-gray-600 mt-1">
                {editingTenant
                  ? "C·∫≠p nh·∫≠t th√¥ng tin kh√°ch thu√™"
                  : "Nh·∫≠p th√¥ng tin kh√°ch thu√™ m·ªõi"}
              </p>
            </div>
            <form onSubmit={handleTenantSubmit} className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    H·ªç v√† t√™n *
                  </label>
                  <input
                    type="text"
                    value={tenantForm.name}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, name: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: Nguy·ªÖn VƒÉn A"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    value={tenantForm.email}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, email: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: tenant@email.com"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ƒëi·ªán tho·∫°i *
                  </label>
                  <input
                    type="tel"
                    value={tenantForm.phone}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, phone: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 0123456789"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    CCCD/CMND
                  </label>
                  <input
                    type="text"
                    value={tenantForm.idCard}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, idCard: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 123456789012"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ph√≤ng *
                  </label>
                  <select
                    value={tenantForm.room}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, room: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  >
                    <option value="">Ch·ªçn ph√≤ng</option>
                    <option value="101">Ph√≤ng 101</option>
                    <option value="102">Ph√≤ng 102</option>
                    <option value="103">Ph√≤ng 103</option>
                    <option value="201">Ph√≤ng 201</option>
                    <option value="202">Ph√≤ng 202</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ng√†y b·∫Øt ƒë·∫ßu thu√™ *
                  </label>
                  <input
                    type="date"
                    value={tenantForm.startDate}
                    onChange={(e) =>
                      setTenantForm({
                        ...tenantForm,
                        startDate: e.target.value,
                      })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ti·ªÅn c·ªçc (VNƒê)
                  </label>
                  <input
                    type="number"
                    value={tenantForm.deposit}
                    onChange={(e) =>
                      setTenantForm({ ...tenantForm, deposit: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 3000000"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p
                  </label>
                  <input
                    type="text"
                    value={tenantForm.emergencyContact}
                    onChange={(e) =>
                      setTenantForm({
                        ...tenantForm,
                        emergencyContact: e.target.value,
                      })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: Nguy·ªÖn VƒÉn B (Anh trai)"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    SƒêT li√™n h·ªá kh·∫©n c·∫•p
                  </label>
                  <input
                    type="tel"
                    value={tenantForm.emergencyPhone}
                    onChange={(e) =>
                      setTenantForm({
                        ...tenantForm,
                        emergencyPhone: e.target.value,
                      })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 0987654321"
                  />
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowTenantModal(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {editingTenant ? "C·∫≠p nh·∫≠t" : "Th√™m kh√°ch thu√™"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* Bill Modal */}
      {showBillModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">
                {editingBill ? "Ch·ªânh s·ª≠a h√≥a ƒë∆°n" : "T·∫°o h√≥a ƒë∆°n m·ªõi"}
              </h3>
              <p className="text-gray-600 mt-1">
                {editingBill
                  ? "C·∫≠p nh·∫≠t th√¥ng tin h√≥a ƒë∆°n"
                  : "Nh·∫≠p th√¥ng tin h√≥a ƒë∆°n m·ªõi"}
              </p>
            </div>
            <form onSubmit={handleBillSubmit} className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ph√≤ng *
                  </label>
                  <select
                    value={billForm.room}
                    onChange={(e) =>
                      setBillForm({ ...billForm, room: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  >
                    <option value="">Ch·ªçn ph√≤ng</option>
                    <option value="101">Ph√≤ng 101</option>
                    <option value="102">Ph√≤ng 102</option>
                    <option value="103">Ph√≤ng 103</option>
                    <option value="201">Ph√≤ng 201</option>
                    <option value="202">Ph√≤ng 202</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Kh√°ch thu√™ *
                  </label>
                  <select
                    value={billForm.tenant}
                    onChange={(e) =>
                      setBillForm({ ...billForm, tenant: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  >
                    <option value="">Ch·ªçn kh√°ch thu√™</option>
                    <option value="Nguy·ªÖn VƒÉn A">Nguy·ªÖn VƒÉn A</option>
                    <option value="Tr·∫ßn Th·ªã B">Tr·∫ßn Th·ªã B</option>
                    <option value="L√™ VƒÉn C">L√™ VƒÉn C</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Lo·∫°i h√≥a ƒë∆°n *
                  </label>
                  <select
                    value={billForm.type}
                    onChange={(e) =>
                      setBillForm({ ...billForm, type: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  >
                    <option value="monthly">Ti·ªÅn ph√≤ng h√†ng th√°ng</option>
                    <option value="electric">Ti·ªÅn ƒëi·ªán</option>
                    <option value="water">Ti·ªÅn n∆∞·ªõc</option>
                    <option value="service">Ph√≠ d·ªãch v·ª•</option>
                    <option value="other">Kh√°c</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    H·∫°n thanh to√°n *
                  </label>
                  <input
                    type="date"
                    value={billForm.dueDate}
                    onChange={(e) =>
                      setBillForm({ ...billForm, dueDate: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë ƒëi·ªán (kWh)
                  </label>
                  <input
                    type="number"
                    value={billForm.electricUsage}
                    onChange={(e) =>
                      setBillForm({
                        ...billForm,
                        electricUsage: e.target.value,
                      })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 150"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    S·ªë n∆∞·ªõc (m¬≥)
                  </label>
                  <input
                    type="number"
                    value={billForm.waterUsage}
                    onChange={(e) =>
                      setBillForm({ ...billForm, waterUsage: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 15"
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    T·ªïng ti·ªÅn (VNƒê) *
                  </label>
                  <input
                    type="number"
                    value={billForm.amount}
                    onChange={(e) =>
                      setBillForm({ ...billForm, amount: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    placeholder="VD: 3500000"
                    required
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ghi ch√∫
                  </label>
                  <textarea
                    value={billForm.description}
                    onChange={(e) =>
                      setBillForm({ ...billForm, description: e.target.value })
                    }
                    className="form-input w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    rows={3}
                    placeholder="Ghi ch√∫ th√™m v·ªÅ h√≥a ƒë∆°n..."
                  />
                </div>
              </div>

              <div className="flex space-x-3 mt-6">
                <button
                  type="button"
                  onClick={() => setShowBillModal(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {editingBill ? "C·∫≠p nh·∫≠t" : "T·∫°o h√≥a ƒë∆°n"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* Report Detail Modal */}
      {showReportDetailModal && selectedReport && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">
                Chi ti·∫øt b√°o c√°o s·ª± c·ªë
              </h3>
              <p className="text-gray-600 mt-1">
                Xem v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω
              </p>
            </div>
            <div className="p-6">
              {/* Report Info */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      V·∫•n ƒë·ªÅ
                    </label>
                    <p className="text-gray-900 font-medium">
                      {selectedReport.issue}
                    </p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Ph√≤ng
                    </label>
                    <p className="text-gray-900">{selectedReport.room}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Kh√°ch thu√™
                    </label>
                    <p className="text-gray-900">{selectedReport.tenant}</p>
                  </div>
                </div>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Ng√†y b√°o c√°o
                    </label>
                    <p className="text-gray-900">{selectedReport.date}</p>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      M·ª©c ƒë·ªô ∆∞u ti√™n
                    </label>
                    <span
                      className={`px-2 py-1 text-xs rounded-full ${
                        selectedReport.priority === "high"
                          ? "bg-red-100 text-red-800"
                          : selectedReport.priority === "medium"
                          ? "bg-yellow-100 text-yellow-800"
                          : "bg-green-100 text-green-800"
                      }`}
                    >
                      {selectedReport.priority === "high"
                        ? "Cao"
                        : selectedReport.priority === "medium"
                        ? "Trung b√¨nh"
                        : "Th·∫•p"}
                    </span>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Tr·∫°ng th√°i hi·ªán t·∫°i
                    </label>
                    <span
                      className={`px-2 py-1 text-xs rounded-full ${getStatusColor(
                        selectedReport.status
                      )}`}
                    >
                      {getStatusText(selectedReport.status)}
                    </span>
                  </div>
                </div>
              </div>

              {/* Description */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√¥ t·∫£ chi ti·∫øt
                </label>
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-gray-900">{selectedReport.description}</p>
                </div>
              </div>

              {/* Status Update */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  C·∫≠p nh·∫≠t tr·∫°ng th√°i
                </label>
                <div className="flex space-x-3">
                  {selectedReport.status === "pending" && (
                    <button
                      onClick={() =>
                        handleUpdateReportStatus(
                          selectedReport.id.toString(),
                          "in-progress"
                        )
                      }
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      B·∫Øt ƒë·∫ßu x·ª≠ l√Ω
                    </button>
                  )}
                  {selectedReport.status === "in-progress" && (
                    <button
                      onClick={() =>
                        handleUpdateReportStatus(
                          selectedReport.id.toString(),
                          "completed"
                        )
                      }
                      className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
                    >
                      Ho√†n th√†nh
                    </button>
                  )}
                  {selectedReport.status === "completed" && (
                    <div className="flex items-center text-green-600">
                      <span className="mr-2">‚úÖ</span>
                      <span>ƒê√£ ho√†n th√†nh x·ª≠ l√Ω</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Response */}
              <div className="mb-6">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ph·∫£n h·ªìi cho kh√°ch thu√™
                </label>
                <textarea
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  rows={3}
                  placeholder="Nh·∫≠p ph·∫£n h·ªìi cho kh√°ch thu√™ v·ªÅ ti·∫øn ƒë·ªô x·ª≠ l√Ω..."
                  defaultValue={selectedReport.response || ""}
                />
                <button className="mt-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                  G·ª≠i ph·∫£n h·ªìi
                </button>
              </div>

              {/* Actions */}
              <div className="flex space-x-3">
                <button
                  onClick={() => setShowReportDetailModal(false)}
                  className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  ƒê√≥ng
                </button>
                <button
                  onClick={() => {
                    alert("ƒê√£ g·ª≠i th√¥ng b√°o cho kh√°ch thu√™!");
                    setShowReportDetailModal(false);
                  }}
                  className="flex-1 bg-green-600 text-white py-2 rounded-lg hover:bg-green-700 transition-colors"
                >
                  Th√¥ng b√°o kh√°ch thu√™
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Review Response Modal */}
      {showReviewResponseModal && selectedReview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-xl font-bold text-gray-900">
                Ph·∫£n h·ªìi ƒë√°nh gi√°
              </h3>
              <p className="text-gray-600 mt-1">
                Ph·∫£n h·ªìi ƒë√°nh gi√° t·ª´ {selectedReview.tenant} - Ph√≤ng{" "}
                {selectedReview.room}
              </p>
            </div>

            <div className="p-6">
              {/* Original Review */}
              <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center mb-2">
                  <div className="flex">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <span
                        key={star}
                        className={`text-lg ${
                          star <= selectedReview.rating
                            ? "text-yellow-400"
                            : "text-gray-300"
                        }`}
                      >
                        ‚≠ê
                      </span>
                    ))}
                  </div>
                  <span className="ml-2 font-bold text-gray-900">
                    {selectedReview.rating}/5
                  </span>
                  <span className="ml-2 text-sm text-gray-500">
                    {selectedReview.date}
                  </span>
                </div>
                <p className="text-gray-700">{selectedReview.review}</p>
              </div>

              {/* Response Form */}
              <form onSubmit={handleReviewResponse}>
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ph·∫£n h·ªìi c·ªßa b·∫°n
                  </label>
                  <textarea
                    value={responseText}
                    onChange={(e) => setResponseText(e.target.value)}
                    className="form-input w-full border border-gray-300 rounded-lg px-4 py-3 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500"
                    rows={4}
                    placeholder="C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°! H√£y chia s·∫ª ph·∫£n h·ªìi c·ªßa b·∫°n..."
                    required
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Ph·∫£n h·ªìi n√†y s·∫Ω hi·ªÉn th·ªã c√¥ng khai d∆∞·ªõi ƒë√°nh gi√° c·ªßa kh√°ch
                    thu√™
                  </p>
                </div>

                <div className="flex space-x-3">
                  <button
                    type="button"
                    onClick={() => setShowReviewResponseModal(false)}
                    className="flex-1 border border-gray-300 text-gray-700 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                  >
                    H·ªßy
                  </button>
                  <button
                    type="submit"
                    className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    {selectedReview.response
                      ? "C·∫≠p nh·∫≠t ph·∫£n h·ªìi"
                      : "G·ª≠i ph·∫£n h·ªìi"}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
